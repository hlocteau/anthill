/**
 * \file IOPgm3d.ih
 */
//#include <io/IOPgm3d.h>
#include <def_billon.h>
#include <billon.h>
#include <QDataStream>
#include <QTextStream>
#include <QStringList>
#include <cast_integer.h>
//namespace io {


template <typename To, typename T, bool tAscii> bool IOPgm3d<To,T,tAscii>::write( const BillonTpl<To> &img, const QString &fileName, const QString &header ) {
	uint 	width 	= img.n_cols,
			height 	= img.n_rows,
			depth	= img.n_slices ;

	QFile file(fileName);
	if( !file.open(QFile::WriteOnly) ) {
		std::cerr << QString("ERREUR : %1 n'a pas pu être écrit.").arg(fileName).toStdString() << std::endl;
		return false;
	}
	QTextStream out(&file);
	out << header <<endl;
	if ( depth != 1 )
		out << QString("%1 %2 %3").arg( width ).arg( height ).arg( depth ) << endl;
	else
		out << QString("%1 %2").arg( width ).arg( height ) << endl;
	out << (int)img.max() << endl;
	if ( !tAscii ) {
		QDataStream dout(&file);
		for ( uint k=0 ; k< depth ; k++ ) {
			for ( uint i=0 ; i< height ; i++ ) {
				for ( uint j=0 ; j< width ; j++ ) {
					dout << cast_integer<To,T>( img(i,j,k) );
				}
			}
		}
	} else {
		for ( uint k=0 ; k< depth ; k++ ) {
			for ( uint i=0 ; i< height ; i++ ) {
				for ( uint j=0 ; j< width ; j++ ) {
					out << (T) img(i,j,k);
				}
			}
		}
	}
	file.close();
	return true ;
}

template <typename To, typename T, bool tAscii> bool IOPgm3d<To,T,tAscii>::write( const arma::Cube<To> &img, const QString &fileName, const QString &header ) {
	uint 	width 	= img.n_cols,
			height 	= img.n_rows,
			depth	= img.n_slices ;

	QFile file(fileName);
	if( !file.open(QFile::WriteOnly) ) {
		std::cerr << QString("ERREUR : %1 n'a pas pu être écrit.").arg(fileName).toStdString() << std::endl;
		return false;
	}
	QTextStream out(&file);
	out << header <<endl;
	if ( depth != 1 )
		out << QString("%1 %2 %3").arg( width ).arg( height ).arg( depth ) << endl;
	else
		out << QString("%1 %2").arg( width ).arg( height ) << endl;
	out << QString("%1").arg( (int)img.max() ) << endl;
	if ( !tAscii ) {
		QDataStream dout(&file);
		for ( uint k=0 ; k< depth ; k++ ) {
			for ( uint i=0 ; i< height ; i++ ) {
				for ( uint j=0 ; j< width ; j++ ) {
					dout << cast_integer<To,T>( img(i,j,k) );
				}
			}
		}
	} else {
		for ( uint k=0 ; k< depth ; k++ ) {
			for ( uint i=0 ; i< height ; i++ ) {
				for ( uint j=0 ; j< width ; j++ ) {
					out << (T) img(i,j,k);
				}
			}
		}
	}
	file.close();
	return true ;
}


template< typename To, typename T, bool tAscii> void IOPgm3d<To,T,tAscii>::read( QFile & imageFile, BillonTpl<To> * img ) {
	if ( _sAscii )
		readAscii( imageFile, img ) ;
	else
		readBinary( imageFile, img ) ;
}
template< typename To, typename T, bool tAscii> void IOPgm3d<To,T,tAscii>::readAscii( QFile & imageFile, BillonTpl<To> * img ) {
	//Lecture de l'image en ascii
	QTextStream data( &imageFile ) ;
	T curVal ;
std::cerr<<"image's dimension : "<<img->n_rows<<" x "<<img->n_cols<<" x "<<img->n_slices<<std::endl;
	for ( uint k=0 ; k<img->n_slices ; k++ ) {
		for ( uint i=0 ; i<img->n_rows ; i++ ) {
			for ( uint j=0 ; j<img->n_cols ; j++ ) {
				data.skipWhiteSpace() ;
				data >> curVal;
				if ( curVal != 0 ) {
					(*img)(i,j,k) = cast_integer<T,To>( curVal );
				}
			}
		}
	}
	imageFile.close() ;
}
	
template< typename To, typename T, bool tAscii> void IOPgm3d<To,T,tAscii>::readBinary( QFile & imageFile, BillonTpl<To> * img ) {
	//Lecture de l'image en binaire
	QDataStream data(&imageFile);
	T curVal;
	for ( uint k=0 ; k<img->n_slices ; k++ ) {
		for ( uint i=0 ; i<img->n_rows ; i++ ) {
			for ( uint j=0 ; j<img->n_cols ; j++ ) {
				data >> curVal;
				if ( curVal != 0 ) {
					(*img)(i,j,k) = cast_integer<T,To>( curVal );
				}
			}
		}
	}
	//std::cout<<"At end of the stream ? "<< ( data.atEnd()?"yes":"no")<<std::endl;
	imageFile.close() ;
}

template< typename To, typename T, bool tAscii> BillonTpl<To> * IOPgm3d<To,T,tAscii>::read( const QString &fileName ) {
	std::map< int, QString > 	desc ;
	QFile 						imageFile(fileName);
	
	if ( !pgmheader( imageFile, desc ) ) {
		std::cerr<<"ERROR : "<<desc[ PGM_HEADER_ERROR ].toStdString()<<" on file "<<fileName.toStdString()<<std::endl;
		return 0 ;
	}
	
	if ( QString( _header ).toLower() != desc[ PGM_HEADER_TYPE ].trimmed().toLower() ) {
		std::cerr<<"ERROR : wrong format wrt used reader; expecting ["<<_header.toStdString()<<"] while reading ["<< desc[ PGM_HEADER_TYPE ].toStdString()<<"] on file "<<fileName.toStdString()<<std::endl;
		return 0 ;
	}
	
	BillonTpl<To> *img = new BillonTpl<To>( desc[ PGM_HEADER_IMAGE_HEIGHT ].toInt(), desc[ PGM_HEADER_IMAGE_WIDTH ].toInt(), desc[ PGM_HEADER_IMAGE_DEPTH ].toInt() ) ;
	img->fill(0);
	img->setMaxValue( desc[ PGM_HEADER_NUMBER_OF_COLORS ].toInt() );
	
	float 	voxelWidth = 1.f,
			voxelHeight = 1.f,
			voxelDepth = 1.f;
	if ( desc.find( PGM_HEADER_VOXEL_WIDTH ) != desc.end() ) 	voxelWidth = desc[ PGM_HEADER_VOXEL_WIDTH ].toFloat() ;
	if ( desc.find( PGM_HEADER_VOXEL_HEIGHT ) != desc.end() ) 	voxelHeight = desc[ PGM_HEADER_VOXEL_HEIGHT ].toFloat() ;
	if ( desc.find( PGM_HEADER_VOXEL_DEPTH ) != desc.end() ) 	voxelDepth = desc[ PGM_HEADER_VOXEL_DEPTH ].toFloat() ;
	img->setVoxelSize( voxelWidth, voxelHeight, voxelDepth );
	
	read( imageFile, img ) ;
	return img ;
}

//}
