#include <connexcomponentextractor.h>
#include <iomanip>
using std::setw ;
#include <billon.h>
const int _sBorder = 0 ;
//#define DEBUG_CONNCOMP_EXTRACTOR

//#define COMP_ICUBE_V3D_TRACE

template<typename T> bool have_touching_conn_comp( const BillonTpl< T > & Label ) {
	register int z,x,y;
	bool is_invariant ;
	bool xleft, yleft,zleft,xright,yright,zright;
	for ( z = 0 ; z < Label.n_slices ; z++ )
		for ( y = 0 ; y < Label.n_rows ; y++ )
			for ( x = 0 ; x < Label.n_cols ; x++ ) {
				if ( !Label(y,x,z) ) continue ;
				xleft=(x>0) ;
				xright=(x<Label.n_rows-1);
				yleft=(y>0) ;
				yright=(y<Label.n_cols-1);
				zleft=(z>0) ;
				zright=(z<Label.n_slices-1);
				/// check the invariant : if a neighbor is not null, its value should be equal
				is_invariant =  ( ( xleft  && 			( Label(y  ,x-1,z  ) == 0 || Label(y  ,x-1,z  ) == Label(y,x,z) ) ) || !xleft) &&
								( ( xright && 			( Label(y  ,x+1,z  ) == 0 || Label(y  ,x+1,z  ) == Label(y,x,z) ) ) || !xright) &&
								( ( 		  yleft  &&	( Label(y-1,x  ,z  ) == 0 || Label(y-1,x  ,z  ) == Label(y,x,z) ) ) || !yleft) &&
								( ( xleft  && yleft  && ( Label(y-1,x-1,z  ) == 0 || Label(y-1,x-1,z  ) == Label(y,x,z) ) ) || (!xleft  || !yleft) ) &&
								( ( xright && yleft  && ( Label(y-1,x+1,z  ) == 0 || Label(y-1,x+1,z  ) == Label(y,x,z) ) ) || (!xright || !yleft) ) &&
								( ( yright && 			( Label(y+1,x  ,z  ) == 0 || Label(y+1,x  ,z  ) == Label(y,x,z) ) ) || !yright) &&
								( ( xleft  && yright && ( Label(y+1,x-1,z  ) == 0 || Label(y+1,x-1,z  ) == Label(y,x,z) ) ) || (!xleft  || !yright) ) &&
								( ( xright && yright && ( Label(y+1,x+1,z  ) == 0 || Label(y+1,x+1,z  ) == Label(y,x,z) ) ) || (!xright || !yright) ) ;
				if ( zleft )
					is_invariant &= 					( Label(y  ,x  ,z-1) == 0 || Label(y  ,x  ,z-1) == Label(y,x,z) ) &&
								( ( xleft  && 			( Label(y  ,x-1,z-1) == 0 || Label(y  ,x-1,z-1) == Label(y,x,z) ) ) || !xleft) &&
								( ( xright && 			( Label(y  ,x+1,z-1) == 0 || Label(y  ,x+1,z-1) == Label(y,x,z) ) ) || !xright) &&
								( ( yleft  &&			( Label(y-1,x  ,z-1) == 0 || Label(y-1,x  ,z-1) == Label(y,x,z) ) ) || !yleft) &&
								( ( xleft  && yleft  &&	( Label(y-1,x-1,z-1) == 0 || Label(y-1,x-1,z-1) == Label(y,x,z) ) ) || (!xleft  || !yleft) ) &&
								( ( xright && yleft  &&	( Label(y-1,x+1,z-1) == 0 || Label(y-1,x+1,z-1) == Label(y,x,z) ) ) || (!xright || !yleft) ) &&
								( ( 		  yright &&	( Label(y+1,x  ,z-1) == 0 || Label(y+1,x  ,z-1) == Label(y,x,z) ) ) || !yright) &&
								( ( xleft  && yright &&	( Label(y+1,x-1,z-1) == 0 || Label(y+1,x-1,z-1) == Label(y,x,z) ) ) || (!xleft  || !yright) ) &&
								( ( xright && yright &&	( Label(y+1,x+1,z-1) == 0 || Label(y+1,x+1,z-1) == Label(y,x,z) ) ) || (!xright || !yright) ) ;
				if ( zright )
					is_invariant &=						( Label(y  ,x  ,z+1) == 0 || Label(y  ,x  ,z+1) == Label(y,x,z) ) &&
								( ( xleft  && 			( Label(y  ,x-1,z+1) == 0 || Label(y  ,x-1,z+1) == Label(y,x,z) ) ) || !xleft) &&
								( ( xright && 			( Label(y  ,x+1,z+1) == 0 || Label(y  ,x+1,z+1) == Label(y,x,z) ) ) || !xright) &&
								( ( 		  yleft  &&	( Label(y-1,x  ,z+1) == 0 || Label(y-1,x  ,z+1) == Label(y,x,z) ) ) || !yleft) &&
								( ( xleft  && yleft  &&	( Label(y-1,x-1,z+1) == 0 || Label(y-1,x-1,z+1) == Label(y,x,z) ) ) || (!xleft  || !yleft) ) &&
								( ( xright && yleft  &&	( Label(y-1,x+1,z+1) == 0 || Label(y-1,x+1,z+1) == Label(y,x,z) ) ) || (!xright || !yleft) ) &&
								( ( 		  yright && ( Label(y+1,x  ,z+1) == 0 || Label(y+1,x  ,z+1) == Label(y,x,z) ) ) || !yright) &&
								( ( xleft  && yright && ( Label(y+1,x-1,z+1) == 0 || Label(y+1,x-1,z+1) == Label(y,x,z) ) ) || (!xleft  || !yright) ) &&
								( ( xright && yright && ( Label(y+1,x+1,z+1) == 0 || Label(y+1,x+1,z+1) == Label(y,x,z) ) ) || (!xright || !yright) ) ;
				if ( !is_invariant ) {
					std::cerr<<"Error : The image we obtained is ill-defined as labelled map can get adjacent voxels with distinct labels, e.g. "<<x<<","<<y<<","<<z<<std::endl;
					register int xx,yy,zz;
					for ( zz=(z==0?z:z-1);zz<=( z==Label.n_slices-1?z:z+1);zz++ )
						std::cerr<<"[z="<<zz<<"] ";
					std::cerr<<std::endl;

					for ( yy=(y==0?y:y-1);yy<=( y==Label.n_rows-1?y:y+1);yy++ ) {
						for ( zz=(z==0?z:z-1);zz<=( z==Label.n_slices-1?z:z+1);zz++ ) {
							for ( xx=(x==0?x:x-1);xx<=( x==Label.n_cols-1?x:x+1);xx++ )
								std::cerr<<(int)Label(yy,xx,zz)<<" " ;
							std::cerr<<"\t\t";
						}
						std::cerr<<std::endl;
					}
					return true ;
				}
			}
	return false ;
}


template<typename IN, typename OUT>
BillonTpl<OUT> * ConnexComponentExtractor<IN,OUT>::run( const BillonTpl<IN> & billon, const int minimumSize, const IN threshold ) {
	_bounds3D.clear();
	_bounds2D.clear();
	_volumes.clear() ;
	
	const uint width = billon.n_cols;
	const uint height = billon.n_rows;
	const uint depth = billon.n_slices;
#ifdef DEBUG_CONNCOMP_EXTRACTOR
std::cerr<<__FILE__<<" @ line "<<__LINE__<<std::endl;
#endif
	int32_t nbLabel = 0;
	typedef QMap<int32_t, QList<iCoord3D> > TMapComp ;
	TMapComp connexComponentList;
	arma::Mat<int32_t>* labels = new arma::Mat<int32_t>(height, width);
	arma::Mat<int32_t>* oldSlice = new arma::Mat<int32_t>(height, width);
	oldSlice->fill(0);
	arma::Mat<int32_t>* tmp;
#ifdef DEBUG_CONNCOMP_EXTRACTOR
std::cerr<<__FILE__<<" @ line "<<__LINE__<<std::endl;
#endif

#ifdef COMP_ICUBE_V3D_TRACE
arma::icube import_trace ;
import_trace.load( "/tmp/traceccv3d.icube" ) ;
std::cout<<"Define view "<<height<<" x "<<width<<" x "<<depth<<" on input "<<import_trace.n_rows<<" x "<<import_trace.n_cols<<" x "<<import_trace.n_slices<<std::endl;
arma::icube import_trace_crop = import_trace.subcube( 0, 0,0, height-1, width-1, depth-1) ;
//std::cout<<"Validity of imported map ? "<< !have_touching_conn_comp( import_trace_crop ) << std::endl;
std::cout<<"Min is "<< import_trace_crop.min() <<" Max is "<< import_trace_crop.max() <<std::endl;
bool bError = false ;
#endif
	//On parcours les tranches 1 par 1
	for ( unsigned int k=0 ; k<depth ; ++k )
	{
		nbLabel = twoPassAlgorithm((*oldSlice),billon.slice(k),(*labels),connexComponentList,k,nbLabel,threshold);
#ifdef COMP_ICUBE_V3D_TRACE
/// can compare *labels to import_trace_crop.slice( k )
		for ( uint y=0;y<height;y++ )
			for ( uint x=0;x<width;x++ )
				if ( (*labels)(y,x) != 0 ) {
					std::cerr<<(*labels)(y,x)<<" vs "<<import_trace_crop(y,x,k)<<std::endl;
					y=height;
					break ;
				}
		
		for ( uint y=0;y<height;y++ )
			for ( uint x=0;x<width;x++ )
				if ( (*labels)(y,x) != import_trace_crop(y,x,k) ) {
					bError = true ;
					std::cerr<<"BAD BEHAVIOUR "<<__FILE__<<" : At x,y,z="<<x<<","<<y<<","<<k<<std::endl;
					for ( uint yy = ( y==0?0:y-1); yy <= ( y==height-1?height-1:y+1) ; yy++) {
						for ( uint xx = ( x==0?0:x-1); xx <= ( x==width-1?width-1:x+1) ; xx++)
							std::cerr<<(*labels)(yy,xx)<<"|"<<import_trace_crop(yy,xx,k)<<"    " ;
						std::cerr<<std::endl;
					}
				}
		if ( bError ) {
			std::cerr<<"Error : different trace from slice "<<k<<std::endl;
			exit(-6);
		}
#endif		
		tmp = oldSlice;
		oldSlice = labels;
		labels = tmp;
		tmp = 0;
	}
#ifdef COMP_ICUBE_V3D_TRACE
import_trace.reset() ;
#endif
#ifdef DEBUG_CONNCOMP_EXTRACTOR
std::cerr<<__FILE__<<" @ line "<<__LINE__<<std::endl;
#endif
	delete labels;
	delete oldSlice;

	BillonTpl<OUT>* components = new BillonTpl<OUT>(billon.n_rows,billon.n_cols,billon.n_slices);
	components->fill(0);

	typename TMapComp::ConstIterator iterComponents;
	QList<iCoord3D>::ConstIterator iterCoords;
	OUT counter = 1;
	for ( iterComponents = connexComponentList.constBegin() ; iterComponents != connexComponentList.constEnd() ; ++iterComponents )
	{
		if ( iterComponents.value().size() > minimumSize )
		{
			iCoord3D 	lower(billon.n_rows,billon.n_cols,billon.n_slices),
						upper(0,0,0);
			for ( iterCoords = iterComponents.value().constBegin() ; iterCoords != iterComponents.value().constEnd() ; ++iterCoords )
			{
				components->at((*iterCoords).y,(*iterCoords).x,(*iterCoords).z) = counter;
				/// hlo debug begin
				if ( 65<=(*iterCoords).y && (*iterCoords).y<=65 && 18<=(*iterCoords).z && (*iterCoords).z<=18 && 75<=(*iterCoords).x && (*iterCoords).x<=75 /*&& counter==1*/)
					std::cerr<<__FUNCTION__<<" @ line "<<__LINE__<<" write label("<<(*iterCoords).y<<","<<(*iterCoords).x<<","<<(*iterCoords).z<<") = "<<counter<<" / "<< iterComponents.key()<<std::endl;
				/// hlo debug end
				if ( lower.x > (*iterCoords).x ) lower.x = (*iterCoords).x ;
				if ( lower.y > (*iterCoords).y ) lower.y = (*iterCoords).y ;
				if ( lower.z > (*iterCoords).z ) lower.z = (*iterCoords).z ;
				if ( upper.x < (*iterCoords).x ) upper.x = (*iterCoords).x ;
				if ( upper.y < (*iterCoords).y ) upper.y = (*iterCoords).y ;
				if ( upper.z < (*iterCoords).z ) upper.z = (*iterCoords).z ;
			}
			_volumes[ counter ] = iterComponents.value().size() ;
			_bounds3D[ counter ] = std::pair< iCoord3D,iCoord3D>( lower, upper ) ;
			++counter;
		}
	}
	qDebug() << QObject::tr("Nombre de composantes = %1").arg(counter-1);
	components->setMinValue(0);
	components->setMaxValue(counter-1);

	return components;
}

template<typename IN, typename OUT>
arma::Mat<OUT> * ConnexComponentExtractor<IN,OUT>::run( const arma::Mat<IN> & slice, const int minimumSize, const IN threshold ) {
	_bounds3D.clear();
	_bounds2D.clear();
	_volumes.clear() ;
	
	const uint width = slice.n_cols;
	const uint height = slice.n_rows;

	QMap<int, QList<iCoord2D> > connexComponentList;
	QMap<int, int> tableEquiv;
	QList<int> voisinage;
	uint j, i;
	int mini, nbLabel, label, currentEquiv;

	arma::Mat<OUT> labels(height, width);
	labels.fill(0);
	nbLabel = 0;
	//On parcourt une premi√®re fois la tranche
	for ( j=1 ; j<height ; ++j)
	{
		for ( i=1 ; i<width-1 ; ++i)
		{
			//Si on a un voxel
			if ( slice.at(j,i) > threshold )
			{
				//On sauvegarde la valeur des voisins non nuls
				voisinage.clear();
				//Voisinage de la face courante
				if (labels.at(j,i-1)) voisinage.append(labels.at(j,i-1));
				if (labels.at(j-1,i-1)) voisinage.append(labels.at(j-1,i-1));
				if (labels.at(j-1,i)) voisinage.append(labels.at(j-1,i));
				if (labels.at(j-1,i+1)) voisinage.append(labels.at(j-1,i+1));
				//Si ses voisins n'ont pas d'√©tiquette
				if ( voisinage.isEmpty() )
				{
					++nbLabel;
					labels.at(j,i) = nbLabel;
				}
				//Si ses voisins ont une √©tiquette
				else if ( voisinage.size() == 1 )
				{
					labels.at(j,i) = voisinage[0];
				}
				else
				{
					QList<int>::ConstIterator iterVoisin = voisinage.constBegin();
					mini = (*iterVoisin++);
					while ( iterVoisin != voisinage.constEnd() )
					{
						mini = qMin(mini,(*iterVoisin++));
					}
					labels.at(j,i) = mini;
					for ( iterVoisin = voisinage.constBegin() ; iterVoisin != voisinage.constEnd() ; ++iterVoisin )
					{
						if ( (*iterVoisin) > mini )
						{
							if ( tableEquiv.contains(*iterVoisin) )
							{
								currentEquiv = tableEquiv[*iterVoisin];
								if ( mini > currentEquiv )
								{
									tableEquiv[*iterVoisin] = mini;
									while (tableEquiv.contains(mini))
									{
										mini = tableEquiv[mini];
									}
									if ( currentEquiv < mini )
									{
										tableEquiv[mini] = currentEquiv;
										labels.at(j,i) = currentEquiv;
									}
									else if ( currentEquiv > mini )
									{
										tableEquiv[currentEquiv] = mini;
										labels.at(j,i) = mini;
									}
								}
								else if ( mini < currentEquiv )
								{
									tableEquiv[*iterVoisin] = currentEquiv;
									while (tableEquiv.contains(currentEquiv))
									{
										currentEquiv = tableEquiv[currentEquiv];
									}
									if ( currentEquiv > mini )
									{
										tableEquiv[currentEquiv] = mini;
										labels.at(j,i) = mini;
									}
									else if ( currentEquiv < mini )
									{
										tableEquiv[mini] = currentEquiv;
										labels.at(j,i) = currentEquiv;
									}
								}
							}
							else
							{
								tableEquiv[*iterVoisin] = mini;
							}
						}
					}
				}
			}
		}
	}

	//R√©solution des chaines dans la table d'√©quivalence
	QMap<int, int>::ConstIterator iterTable;
	int value;
	for ( iterTable = tableEquiv.constBegin() ; iterTable != tableEquiv.constEnd() ; ++iterTable )
	{
		value = iterTable.value();
		while (tableEquiv.contains(value))
		{
			value = tableEquiv[value];
		}
		tableEquiv[iterTable.key()] = value;
	}
	for ( j=0 ; j<height ; ++j )
	{
		for ( i=0 ; i<width ; ++i )
		{
			label = labels.at(j,i);
			//Si on a un voxel
			if (label)
			{
				if (tableEquiv.contains(label))
				{
					labels.at(j,i) = tableEquiv[label];
					label = labels.at(j,i);
				}
				if (!connexComponentList.contains(label)) connexComponentList[label] = QList<iCoord2D>();
				connexComponentList[label].append(iCoord2D(i,j));
			}
		}
	}

	arma::Mat<OUT> *bigestComponentsInSlice = new arma::Mat<OUT>(width,height);
	bigestComponentsInSlice->fill(0);
	QMap<int, QList<iCoord2D> >::ConstIterator iterComponents;
	QList<iCoord2D>::ConstIterator iterCoords;
	int counter = 1;
	for ( iterComponents = connexComponentList.constBegin() ; iterComponents != connexComponentList.constEnd() ; ++iterComponents )
	{
		if ( iterComponents.value().size() > minimumSize )
		{
			for ( iterCoords = iterComponents.value().constBegin() ; iterCoords != iterComponents.value().constEnd() ; ++ iterCoords )
			{
				bigestComponentsInSlice->at((*iterCoords).y,(*iterCoords).x) = counter;
			}
			++counter;
		}
	}

	return bigestComponentsInSlice;
}

template<typename IN, typename OUT>
int32_t ConnexComponentExtractor<IN,OUT>::twoPassAlgorithm( const arma::Mat<int32_t> &oldSlice, const arma::Mat<IN> &currentSlice, arma::Mat<int32_t> &labels, 
														QMap<int32_t, QList<iCoord3D> > &connexComponentList, int k, int32_t nbLabel, const IN threshold )
{
	const uint width = currentSlice.n_cols;
	const uint height = currentSlice.n_rows;

	QMap<int32_t, int32_t> tableEquiv;
	typedef QList<int32_t> TVoisinage ;
	TVoisinage voisinage;
	uint j, i;
	int32_t mini, oldStart, sup, inf, label,currentEquiv;
	bool isOld;
	labels.fill(0);
	#ifdef DEBUG_CONNCOMP_EXTRACTOR
	std::cerr<<__FILE__<<" @ line "<<__LINE__<<" ("<<k<<")"<<std::endl;
	#endif
	//On parcourt une premi√®re fois la tranche
	bool bFirstSmallestLabel = (k==19) ;
	for ( j=_sBorder ; j<height-_sBorder ; j++)
	{
		for ( i=_sBorder ; i<width-_sBorder ; i++)
		{
			//Si on a un voxel
			if ( currentSlice.at(j,i) > threshold )
			{
				//On sauvegarde la valeur des voisins non nuls
				voisinage.clear();
				//Voisinage de la face courante
				if ( i>0) {
					if (labels.at(j,i-1)) voisinage.append(labels.at(j,i-1));
					if ( j>0 )
						if (labels.at(j-1,i-1))voisinage.append(labels.at(j-1,i-1));
				}
				if ( j>0) {
					if (labels.at(j-1,i)) voisinage.append(labels.at(j-1,i));
					if ( i < width-1)
						if (labels.at(j-1,i+1)) voisinage.append(labels.at(j-1,i+1));
				}
				oldStart = voisinage.size();
				//Voisinage de la face arri√®re
				if ( j>0) {
					if ( i>0 )
						if (oldSlice.at(j-1,i-1)) voisinage.append(oldSlice.at(j-1,i-1));
					if (oldSlice.at(j-1,i)) voisinage.append(oldSlice.at(j-1,i));
					if ( i<width-1)
						if (oldSlice.at(j-1,i+1)) voisinage.append(oldSlice.at(j-1,i+1));
				}
				if ( i>0 )
					if (oldSlice.at(j,i-1)) voisinage.append(oldSlice.at(j,i-1));
				if (oldSlice.at(j,i)) voisinage.append(oldSlice.at(j,i));
				if ( i<width-1)
					if (oldSlice.at(j,i+1)) voisinage.append(oldSlice.at(j,i+1));
				if ( j <height-1) {
					if ( i>0 )
						if (oldSlice.at(j+1,i-1)) voisinage.append(oldSlice.at(j+1,i-1));
					if (oldSlice.at(j+1,i)) voisinage.append(oldSlice.at(j+1,i));
					if ( i<width-1)
						if (oldSlice.at(j+1,i+1)) voisinage.append(oldSlice.at(j+1,i+1));
				}
				///hlo
				if ( true&&i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1) ) {
					std::cerr<<"== "<<__FUNCTION__<<" @ line "<<__LINE__<<" for voxel "<<i<<","<<j<<","<<k<<" we get adjacent labels ";
					typename TVoisinage::ConstIterator iterVoisin = voisinage.constBegin();
					while ( iterVoisin != voisinage.constEnd() )
					{
						std::cerr<< *iterVoisin<<" " ;
						iterVoisin++ ;
					}
					std::cerr<<std::endl;
					std::cerr	<<setw(4)<<labels.at(j-1,i-1)<<" "<<setw(4)<<labels.at(j-1,i  )<<" "<<setw(4)<<labels.at(j-1,i+1)<<std::endl
								<<setw(4)<<labels.at(j  ,i-1)<<" "<<setw(4)<<"X"<<" "<<setw(4)<<"X"<<std::endl ;
					std::cerr	<<setw(4)<<oldSlice.at(j-1,i-1)<<" "<<setw(4)<<oldSlice.at(j-1,i  )<<" "<<setw(4)<<oldSlice.at(j-1,i+1)<<std::endl
								<<setw(4)<<oldSlice.at(j  ,i-1)<<" "<<setw(4)<<oldSlice.at(j  ,i  )<<" "<<setw(4)<<oldSlice.at(j  ,i+1)<<std::endl
								<<setw(4)<<oldSlice.at(j+1,i-1)<<" "<<setw(4)<<oldSlice.at(j+1,i  )<<" "<<setw(4)<<oldSlice.at(j+1,i+1)<<std::endl ;
				}
				///end
				//Si ses voisins n'ont pas d'√©tiquette
				if ( voisinage.isEmpty() )
				{
					nbLabel++;
					labels.at(j,i) = nbLabel;
					#ifdef DEBUG_CONNCOMP_EXTRACTOR
					///hlo
					std::cerr<<"voxel["<<j<<","<<i<<","<<k<<"] new label "<< (int) nbLabel<<" -- "<<(int)currentSlice.at(j,i)<<" > "<<(int)threshold<< std::endl;
					/// end
					#endif
					/// hlo debug begin
					if ( true&&i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1))
						std::cerr<<__FUNCTION__<<" @ line "<<__LINE__<<" write label("<<i<<","<<j<<","<<k<<") = "<<nbLabel<<std::endl;
					/// hlo debug end
				}
				//Si ses voisins ont une √©tiquette
				else
				{
					typename TVoisinage::ConstIterator iterVoisin = voisinage.constBegin();
					mini = (*iterVoisin);
					iterVoisin++;
					while ( iterVoisin != voisinage.constEnd() )
					{
						#ifdef DEBUG_CONNCOMP_EXTRACTOR
						///hlo
						std::cerr<<"voxel["<<j<<","<<i<<","<<k<<"] "<< (int) *iterVoisin<<std::endl;
						/// end
						#endif
						mini = qMin(mini,(*iterVoisin));
						iterVoisin++;
					}
					//Attribution de la valeur minimale au voxel courant
					labels.at(j,i) = mini;
					isOld = connexComponentList.contains(mini);
#ifdef OLD_CODE_REWRITING_RULE_PROCESSING
					/// hlo debug begin
					if ( true&&i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1))
						std::cerr<<__FUNCTION__<<" @ line "<<__LINE__<<" write label("<<i<<","<<j<<","<<k<<") = "<<mini<<" | isOld = "<<isOld<<" oldStart "<<oldStart<<"/"<<voisinage.size()<<std::endl;
					/// hlo debug end
					//Mise √† jour de la table d'√©quivalence pour la face courante
					//et fusion des liste de sommets si un voxel fusionne des composantes connexes ant√©rieures
					for ( int ind=0 ; ind<oldStart ; ++ind )
					{
						if ( voisinage[ind] > mini )
						{
							if (/*i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1)*/true) {
								if ( tableEquiv.contains(voisinage[ind]) )
									if ( tableEquiv[voisinage[ind]] != mini ) {
										std::cerr<<"warning @ line "<<__LINE__<<" tableEquiv["<<voisinage[ind]<<"] is "<<tableEquiv[voisinage[ind]]<<" and will be "<<mini<<" at voxel "<<i<<","<<j<<","<<k<<std::endl;
										if ( tableEquiv.contains( tableEquiv[voisinage[ind]] ) ) {
											std::cerr<<"                          and tableEquiv["<<tableEquiv[voisinage[ind]]<<"] is "<<tableEquiv[ tableEquiv[voisinage[ind]] ]<<std::endl;
										}
									}
							}
							tableEquiv[voisinage[ind]] = mini;
							if (isOld && connexComponentList.contains(voisinage[ind]))
							{
								connexComponentList[mini].append(connexComponentList.take(voisinage[ind]));
							}
							if (true&&i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1)) {
								std::cerr<<"@ line "<<__LINE__<<" set tableEquiv["<<voisinage[ind]<<"] as "<<mini<<std::endl;
							}
						}
					}
					if ( isOld )
					{
						for ( int ind=oldStart ; ind<voisinage.size() ; ++ind )
						{
							if ( voisinage[ind] != mini )
							{
								if ( mini>voisinage[ind] )
								{
									sup = mini;
									inf = voisinage[ind];
								}
								else
								{
									sup = voisinage[ind];
									inf = mini;
								}
								if (/*i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1)*/true) {
									if ( tableEquiv.contains(sup) )
										if ( tableEquiv[sup] != inf ) {
											std::cerr<<"warning @ line "<<__LINE__<<" tableEquiv["<<sup<<"] is "<<tableEquiv[sup]<<" and will be "<< inf<<" at voxel "<<i<<","<<j<<","<<k<<std::endl;
											if ( tableEquiv.contains( tableEquiv[sup] ) ) {
												std::cerr<<"                          and tableEquiv["<<tableEquiv[sup]<<"] is "<<tableEquiv[ tableEquiv[sup] ]<<std::endl;
											}
										}
								}
								tableEquiv[sup] = inf;
								if (true&&i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1)) {
									std::cerr<<"@ line "<<__LINE__<<" set tableEquiv["<<sup<<"] as "<<inf<<std::endl;
								}
								//if ( ! connexComponentList.contains(sup ) ) continue ;
								connexComponentList[inf].append(connexComponentList.take(sup));
							}
						}
					}
#else
for ( int ind = 0 ; ind < voisinage.size() ; ind++ ) {
	if ( voisinage[ ind ] == mini ) continue ;
	if ( !tableEquiv.contains( voisinage[ ind ] ) ) {
		tableEquiv[ voisinage[ind] ] = mini ;
	} else {
		currentEquiv = tableEquiv[ voisinage[ ind ] ] ;
		if ( currentEquiv == mini ) continue ;
		if ( mini > currentEquiv ) {
			tableEquiv[ voisinage[ ind ] ] = mini ;
			if ( tableEquiv.contains( mini ) ) {
				while ( tableEquiv.contains( mini ) ) {
					mini = tableEquiv[ mini ] ;
				}
			}
			if ( currentEquiv < mini ) {
				tableEquiv[ mini ] = currentEquiv ;
				labels.at(j,i) = currentEquiv ;
			} else if ( currentEquiv > mini ) {
				tableEquiv[ currentEquiv ] = mini ;
				labels.at(j,i) = mini ;
			}
		} else {
			while ( tableEquiv.contains( currentEquiv ) )
				currentEquiv = tableEquiv[ currentEquiv ] ;
			if ( currentEquiv > mini ) {
				tableEquiv[ currentEquiv ] = mini ;
				labels.at(j,i) = mini ;
			} else if ( currentEquiv < mini ) {
				tableEquiv[ mini ] = currentEquiv ;
				labels.at(j,i) = currentEquiv ;
			}
		}
	}
}
#endif
				}
			/// hlo
			if ( labels(j,i) == 33 && k == 19 && bFirstSmallestLabel ) {
				bFirstSmallestLabel = false ;
				std::cerr<<"ERROR.info : retrieve label "<<labels(j,i)<<" at voxel("<<i<<","<<j<<","<<k<<")"<<std::endl;
			}
			/// end
			} else { /// hlo
				#ifdef DEBUG_CONNCOMP_EXTRACTOR
				if ( currentSlice.at(j,i) != (IN)0 ) {
					std::cerr<<__FILE__<<" @ line"<<__LINE__<<" ignore at("<<j<<","<<i<<","<<k<<") value "<<(int)currentSlice.at(j,i)<<std::endl;
				}
				#endif
			}
		}
	}
	#ifdef DEBUG_CONNCOMP_EXTRACTOR
	std::cerr<<__FILE__<<" @ line "<<__LINE__<<std::endl;
	#endif
	//R√©solution des chaines dans la table d'√©quivalence
	#if 0
	typename QMap<int32_t, int32_t>::ConstIterator iterTable;
	OUT value;
	for ( iterTable = tableEquiv.constBegin() ; iterTable != tableEquiv.constEnd() ; ++iterTable )
	{
		value = iterTable.value();
		std::cerr<<"@line "<<__LINE__<<" "<<(int)iterTable.key()<<" is like ";
		while (tableEquiv.contains(value))
		{
			value = tableEquiv[value];
			std::cerr<<(int)value<<" " ;
		}
		tableEquiv[iterTable.key()] = value;
		std::cerr<<(int)value<<" at slide "<<k<<std::endl ;
	}
	#else
	QMapIterator<int32_t,int32_t> iter(tableEquiv) ;
	while ( iter.hasNext() ) {
		iter.next();
		if ( tableEquiv.contains(iter.value()))
			tableEquiv[iter.key()]=tableEquiv[iter.value()];
	}
#ifndef OLD_CODE_REWRITING_RULE_PROCESSING
	for ( QMap<int32_t,int32_t>::iterator iter = tableEquiv.begin() ; iter != tableEquiv.end() ; iter++ ) {
		if ( connexComponentList.contains( iter.key() ) )
			connexComponentList[ iter.value() ].append( connexComponentList.take( iter.key() ) ) ;
	}
	
#endif
	
	#endif
	#ifdef DEBUG_CONNCOMP_EXTRACTOR
	std::cerr<<__FILE__<<" @ line "<<__LINE__<<std::endl;
	#endif
	for ( j=0 ; j<height ; ++j )
	{
		for ( i=0 ; i<width ; ++i )
		{
			label = labels.at(j,i);
			//Si on a un voxel
			if (label)
			{
				if (tableEquiv.contains(label))
				{
					labels.at(j,i) = tableEquiv[label];
					label = labels.at(j,i);
					/// hlo debug begin
					if (i>=(96-1)&&i<=(96+1)&&j>=(105-1)&&j<=(105+1)&&k>=(4-1)&&k<=(4+1))
						std::cerr<<__FUNCTION__<<" @ line "<<__LINE__<<" write label("<<i<<","<<j<<","<<k<<") = "<<label<<std::endl;
					/// hlo debug end
				}
				if (!connexComponentList.contains(label)) connexComponentList[label] = QList<iCoord3D>();
				connexComponentList[label].append(iCoord3D(i,j,k));
			}
		}
	}
	#ifdef DEBUG_CONNCOMP_EXTRACTOR
	std::cerr<<__FILE__<<" @ line "<<__LINE__<<" ("<<k<<";"<<(int)nbLabel<<")"<<std::endl;
	#endif
	return nbLabel;
}
